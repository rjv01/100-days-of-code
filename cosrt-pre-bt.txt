/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *bst(TreeNode *&root,int ele){
        if(root == nullptr){
            root = new TreeNode(ele);
            return root;
        }

        if(root->val>ele){
            root->left = bst(root->left,ele);
        }
        else{
            root->right = bst(root->right,ele);
        }
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        TreeNode *root = nullptr;

        for(auto x:preorder){
            bst(root,x);
        }

        return root;
    }
};
    //Striver soln
    // TreeNode *bst(vector<int> &preorder,int &i,int bound){
    //     if(i == preorder.size() or preorder[i]>bound)
    //         return nullptr;
    //     TreeNode *root = new TreeNode(preorder[i++]);
    //     root->left = bst(preorder,i,root->val);
    //     root->right = bst(preorder,i,bound);
    //     return root;
    // }
    // TreeNode* bstFromPreorder(vector<int>& preorder) {
    //     int i{0};
    //     return bst(preorder,i,INT_MAX);
    // }