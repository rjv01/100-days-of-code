class Solution {
public:
    //Recursion
    int power(int num){
        if(num==1)
            return 0;
        return (num%2 == 0)?power(num/2)+1:power(3*num+1)+1;
    }
    int getKth(int lo, int hi, int k) {
        vector<pair<int,int>> vp;
        for(int i{lo};i<=hi;i++){
            vp.push_back({power(i),i});
        }
        sort(vp.begin(),vp.end());
        return vp[k-1].second;
    }
};
//brute force 
/*
class Solution {
public:
    int power(int num){
        int count{0};
        while(num!=1){
            if(num%2 == 0)
                num = num/2;
            else
                num = 3*num+1;
            
            count++;
        }
        return count;
    }
    int getKth(int lo, int hi, int k) {
        vector<int> v;
        vector<int> num;
        vector<pair<int,int>> vp;
        for(int i{lo};i<=hi;i++){
            v.push_back(i);
        }
        for(auto x:v){
            vp.push_back({power(x),x});
        }
        sort(vp.begin(),vp.end());
        for(auto x:vp){
            cout<<x.first<<" "<<x.second<<endl;
            num.push_back(x.second);
        }

        return vp[k-1].second;
    }
};
*/