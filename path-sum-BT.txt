/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool preorderSum(TreeNode *root,int targetSum,int currSum){
        if(root == nullptr) return false;

        //leaf node;
        //if we found leaf node then find sum till leaf node and compare with targetSum
       
        if(root->left == nullptr and root->right == nullptr){
            currSum += root->val;
            if(targetSum == currSum) return true;
            return false;
        }
       
        bool leftsum = preorderSum(root->left,targetSum,currSum + root->val);
        bool rightsum = preorderSum(root->right,targetSum,currSum + root->val);

        // if(leftsum == true or rightsum == true) 
        //     return true;
        // else 
        //     return false;
        
        return leftsum || rightsum;
    }
    bool hasPathSum(TreeNode* root, int targetSum) {

        return preorderSum(root,targetSum,0);
    }
};