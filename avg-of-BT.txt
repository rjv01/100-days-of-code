/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //BFS itr soln
    vector<double> averageOfLevels(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);
        vector<double> ans;
        while(q.size()){ // queue condition
            double queueLen = q.size(),rowSum=0; // len of new added ele 
            for(int i{0};i<queueLen;i++){
                TreeNode *curr = q.front(); 
                q.pop();
                rowSum += curr->val;
                if(curr->left) q.push(curr->left); //push if left is !null
                if(curr->right) q.push(curr->right);//push if rig is !null
            }
            ans.push_back(rowSum/queueLen); // sum of ele/count of tht ele
        } 
        return ans;
    }
};

/*
//bfs recursive soln
class Solution {
public:
    vector<double> res;
    vector<int> count;
    void bfs(TreeNode *root,int level = 0){
        if(root == nullptr) return ;

        if(res.size() == level){
            res.push_back(0);
            count.push_back(0);
        }
        res[level] += root->val;
        count[level]++;

        bfs(root->left,level+1);
        bfs(root->right,level+1);
    }
    vector<double> averageOfLevels(TreeNode* root) {
        bfs(root);
        int n = res.size();
        for(int i{0};i<n;i++){
            res[i] = res[i]/count[i];
        }
        return res;
    }
};
*/